From c47f4b93f8357835000da383ab4f1c4d8afec1e8 Mon Sep 17 00:00:00 2001
From: adolfgatonegro <github@gatoneg.ro>
Date: Fri, 10 Mar 2023 10:52:45 -0600
Subject: [PATCH 3/3] patch dwm.c

+ reverted upstream commit 712d633, which broke my linkhandler script
  due to its changes to child process management
+ add autostart function for dwmblocks
+ change view function to add toggle tag functionality
+ add KeyPressMask event to wa.event_mask for media keys functionality
  in slock
+ add float_and_center function to resize and centre windows when
  toggling their floating state
---
 dwm.c | 50 +++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 39 insertions(+), 11 deletions(-)

diff --git a/dwm.c b/dwm.c
index 051127f..285d77b 100644
--- a/dwm.c
+++ b/dwm.c
@@ -309,6 +309,7 @@
 static void drawbarwin(Bar *bar);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
+static void float_and_center(const Arg *arg);
 static void focus(Client *c);
 static void focusin(XEvent *e);
 static void focusmon(const Arg *arg);
@@ -337,6 +338,7 @@
 static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
 static void run(void);
+static void runAutostart(void);
 static void scan(void);
 static int sendevent(Window w, Atom proto, int m, long d0, long d1, long d2, long d3, long d4);
 static void sendmon(Client *c, Monitor *m);
@@ -348,6 +350,7 @@
 static void setup(void);
 static void seturgent(Client *c, int urg);
 static void showhide(Client *c);
+static void sigchld(int unused);
 static void spawn(const Arg *arg);
 static void tag(const Arg *arg);
 static void tagmon(const Arg *arg);
@@ -1192,6 +1195,25 @@
 	}
 }
 
+/* move windows to the centre of the screen when made floating */
+void
+float_and_center(const Arg *arg) {
+	Client *c;
+	int nx, ny;
+	int nw = 900, nh = 700;
+	c = selmon->sel;
+
+	togglefloating(arg);
+	if (c->isfloating) {
+		/* first resize */
+		resize(c, 0, 0, nw - 2*c->bw, nh - 2*c->bw, 0);
+		nx = selmon->wx + (selmon->ww / 2) - (c->w / 2);
+		ny = selmon->wy + (selmon->wh / 2) - (c->h / 2);
+		/* next move */
+		resize(c, nx, ny, c->w, c->h, 0);
+	}
+}
+
 void
 focus(Client *c)
 {
@@ -1914,6 +1936,11 @@
 }
 
 void
+runAutostart(void) {
+	system("killall -q dwmblocks; dwmblocks &");
+}
+
+void
 scan(void)
 {
 	scanner = 1;
@@ -2083,16 +2110,8 @@
 	int i;
 	XSetWindowAttributes wa;
 	Atom utf8string;
-	struct sigaction sa;
-
-	/* do not transform children into zombies when they terminate */
-	sigemptyset(&sa.sa_mask);
-	sa.sa_flags = SA_NOCLDSTOP | SA_NOCLDWAIT | SA_RESTART;
-	sa.sa_handler = SIG_IGN;
-	sigaction(SIGCHLD, &sa, NULL);
-
-	/* clean up any zombies (inherited from .xinitrc etc) immediately */
-	while (waitpid(-1, NULL, WNOHANG) > 0);
+	/* clean up any zombies immediately */
+	sigchld(0);
 
 	signal(SIGHUP, sighup);
 	signal(SIGTERM, sigterm);
@@ -2170,7 +2189,7 @@
 	wa.cursor = cursor[CurNormal]->cursor;
 	wa.event_mask = SubstructureRedirectMask|SubstructureNotifyMask
 		|ButtonPressMask|PointerMotionMask|EnterWindowMask
-		|LeaveWindowMask|StructureNotifyMask|PropertyChangeMask;
+		|LeaveWindowMask|StructureNotifyMask|PropertyChangeMask|KeyPressMask;
 	XChangeWindowAttributes(dpy, root, CWEventMask|CWCursor, &wa);
 	XSelectInput(dpy, root, wa.event_mask);
 
@@ -2217,6 +2236,13 @@
 	}
 }
 
+void
+sigchld(int unused)
+{
+	if (signal(SIGCHLD, sigchld) == SIG_ERR)
+		die("can't install SIGCHLD handler:");
+	while (0 < waitpid(-1, NULL, WNOHANG));
+}
 
 void
 spawn(const Arg *arg)
@@ -2689,6 +2715,7 @@
 {
 	if ((arg->ui & TAGMASK) == selmon->tagset[selmon->seltags])
 	{
+		view(&((Arg) { .ui = 0 })); /* switch to previous tag if called again */
 		return;
 	}
 	selmon->seltags ^= 1; /* toggle sel tagset */
@@ -2808,6 +2835,7 @@
 		die("pledge");
 #endif /* __OpenBSD__ */
 	scan();
+	runAutostart();
 	run();
 	cleanup();
 	XCloseDisplay(dpy);
