From c9ceb5fd523a4b51577e624f56303fe47cf25b24 Mon Sep 17 00:00:00 2001
From: adolfgatonegro <github@gatoneg.ro>
Date: Fri, 10 Mar 2023 10:52:22 -0600
Subject: [PATCH 2/3] customised config.h

---
 config.h | 309 ++++++++++++++++++++++++++++++++-----------------------
 1 file changed, 182 insertions(+), 127 deletions(-)

diff --git a/config.h b/config.h
index e02e1de..404c5f3 100644
--- a/config.h
+++ b/config.h
@@ -1,62 +1,68 @@
 /* See LICENSE file for copyright and license details. */
 
+/* for XF86 Media Keys */
+#include <X11/XF86keysym.h>
+
+/* constants */
+#define TERM "st"
+#define BROWSER "firefox"
+
 /* appearance */
 static const unsigned int borderpx       = 1;   /* border pixel of windows */
 static const unsigned int snap           = 32;  /* snap pixel */
 static const int swallowfloating         = 0;   /* 1 means swallow floating windows by default */
-static const unsigned int gappih         = 20;  /* horiz inner gap between windows */
-static const unsigned int gappiv         = 10;  /* vert inner gap between windows */
-static const unsigned int gappoh         = 10;  /* horiz outer gap between windows and screen edge */
-static const unsigned int gappov         = 30;  /* vert outer gap between windows and screen edge */
-static const int smartgaps_fact          = 1;   /* gap factor when there is only one client; 0 = no gaps, 3 = 3x outer gaps */
+static const unsigned int gappih         = 4;  /* horiz inner gap between windows */
+static const unsigned int gappiv         = 4;  /* vert inner gap between windows */
+static const unsigned int gappoh         = 4;  /* horiz outer gap between windows and screen edge */
+static const unsigned int gappov         = 4;  /* vert outer gap between windows and screen edge */
+static const int smartgaps_fact          = 0;   /* gap factor when there is only one client; 0 = no gaps, 3 = 3x outer gaps */
 static const int showbar                 = 1;   /* 0 means no bar */
 static const int topbar                  = 1;   /* 0 means bottom bar */
-static const int bar_height              = 0;   /* 0 means derive from font, >= 1 explicit height */
+static const int bar_height              = 25;   /* 0 means derive from font, >= 1 explicit height */
 /* Status is to be shown on: -1 (all monitors), 0 (a specific monitor by index), 'A' (active monitor) */
 static const int statusmon               = 'A';
-static const unsigned int systrayspacing = 2;   /* systray spacing */
+static const unsigned int systrayspacing = 8;   /* systray spacing */
+static const unsigned int systrayiconsize = 16; /* systray icon size in px, in bar_systray.c systray->h = systrayiconsize */
 static const int showsystray             = 1;   /* 0 means no systray */
 
-
-
 /* Indicators: see patch/bar_indicators.h for options */
 static int tagindicatortype              = INDICATOR_TOP_LEFT_SQUARE;
 static int tiledindicatortype            = INDICATOR_NONE;
 static int floatindicatortype            = INDICATOR_TOP_LEFT_SQUARE;
-static const char *fonts[]               = { "monospace:size=10" };
-static const char dmenufont[]            = "monospace:size=10";
+static const char *fonts[]               = { "monospace:size=8" };
+/* static const char dmenufont[]            = "monospace:size=9"; */
 
 static char c000000[]                    = "#000000"; // placeholder value
 
 static char normfgcolor[]                = "#bbbbbb";
-static char normbgcolor[]                = "#222222";
-static char normbordercolor[]            = "#444444";
-static char normfloatcolor[]             = "#db8fd9";
+static char normbgcolor[]                = "#0a0a20";
+static char normbordercolor[]            = "#0a0a20";
+static char normfloatcolor[]             = "#0a0a20";
 
 static char selfgcolor[]                 = "#eeeeee";
-static char selbgcolor[]                 = "#005577";
-static char selbordercolor[]             = "#005577";
-static char selfloatcolor[]              = "#005577";
-
-static char titlenormfgcolor[]           = "#bbbbbb";
-static char titlenormbgcolor[]           = "#222222";
-static char titlenormbordercolor[]       = "#444444";
-static char titlenormfloatcolor[]        = "#db8fd9";
-
-static char titleselfgcolor[]            = "#eeeeee";
-static char titleselbgcolor[]            = "#005577";
-static char titleselbordercolor[]        = "#005577";
-static char titleselfloatcolor[]         = "#005577";
-
-static char tagsnormfgcolor[]            = "#bbbbbb";
-static char tagsnormbgcolor[]            = "#222222";
-static char tagsnormbordercolor[]        = "#444444";
-static char tagsnormfloatcolor[]         = "#db8fd9";
-
-static char tagsselfgcolor[]             = "#eeeeee";
-static char tagsselbgcolor[]             = "#005577";
-static char tagsselbordercolor[]         = "#005577";
-static char tagsselfloatcolor[]          = "#005577";
+static char selbgcolor[]                 = "#ff00aa";
+static char selbordercolor[]             = "#ff00aa";
+static char selfloatcolor[]              = "#ff00aa";
+
+static char titlenormfgcolor[]           = "#c1c1d1";
+static char titlenormbgcolor[]           = "#0a0a20";
+static char titlenormbordercolor[]       = "#0a0a20";
+static char titlenormfloatcolor[]        = "#0a0a20";
+
+static char titleselfgcolor[]            = "#c1c1d1";
+static char titleselbgcolor[]            = "#262639";
+static char titleselbordercolor[]        = "#262639";
+static char titleselfloatcolor[]         = "#262639";
+
+static char tagsnormfgcolor[]            = "#c1c1d1";
+static char tagsnormbgcolor[]            = "#0a0a20";
+static char tagsnormbordercolor[]        = "#0a0a20";
+static char tagsnormfloatcolor[]         = "#0a0a20";
+
+static char tagsselfgcolor[]             = "#0a0a20";
+static char tagsselbgcolor[]             = "#ff00aa";
+static char tagsselbordercolor[]         = "#ff00aa";
+static char tagsselfloatcolor[]          = "#ff00aa";
 
 static char hidnormfgcolor[]             = "#005577";
 static char hidselfgcolor[]              = "#227799";
@@ -68,9 +74,7 @@ static char urgbgcolor[]                 = "#222222";
 static char urgbordercolor[]             = "#ff0000";
 static char urgfloatcolor[]              = "#db8fd9";
 
-
-
-static const unsigned int baralpha = 0xd0;
+static const unsigned int baralpha = 0xf9;
 static const unsigned int borderalpha = OPAQUE;
 static const unsigned int alphas[][3] = {
 	/*                       fg      bg        border     */
@@ -98,13 +102,16 @@ static char *colors[][ColCount] = {
 	[SchemeUrg]          = { urgfgcolor,       urgbgcolor,       urgbordercolor,       urgfloatcolor },
 };
 
-
-
-
-const char *spcmd1[] = {"st", "-n", "spterm", "-g", "120x34", NULL };
+const char *spcmd1[] = {TERM, "-n", "spterm", "-g", "120x34", NULL };
+const char *spcmd2[] = {TERM, "-n", "spmusic", "-g", "120x34", "-e", "cmus", NULL };
+const char *spcmd3[] = {TERM, "-n", "spsysmon", "-g", "120x34", "-e", "btop", NULL };
+const char *spcmd4[] = {TERM, "-n", "spcalc", "-g", "50x20", "-e", "bc", "-lq", NULL };
 static Sp scratchpads[] = {
-   /* name          cmd  */
-   {"spterm",      spcmd1},
+	/* name          cmd  */
+	{"spterm",   spcmd1},
+	{"spmusic",  spcmd2},
+	{"spsysmon", spcmd3},
+	{"spcalc",   spcmd4},
 };
 
 /* Tags
@@ -141,7 +148,6 @@ static char *tagicons[][NUMTAGS] =
 	[ALT_TAGS_DECORATION] = { "<1>", "<2>", "<3>", "<4>", "<5>", "<6>", "<7>", "<8>", "<9>" },
 };
 
-
 /* There are two options when it comes to per-client rules:
  *  - a typical struct table or
  *  - using the RULE macro
@@ -171,13 +177,23 @@ static const Rule rules[] = {
 	RULE(.wintype = WTYPE "UTILITY", .isfloating = 1)
 	RULE(.wintype = WTYPE "TOOLBAR", .isfloating = 1)
 	RULE(.wintype = WTYPE "SPLASH", .isfloating = 1)
-	RULE(.class = "Gimp", .tags = 1 << 4)
-	RULE(.class = "Firefox", .tags = 1 << 7)
+	RULE(.class = "firefox", .tags = 1 << 0)
+	RULE(.class = "discord", .tags = 1 << 3)
+	RULE(.class = "ONLYOFFICE Desktop Editors", .tags = 1 << 4)
+	RULE(.class = "Steam", .tags = 1 << 5, .isfloating = 1)
+	RULE(.class = "Gimp", .tags = 1 << 6)
+	RULE(.class = "Inkscape", .tags = 1 << 6)
+	RULE(.class = "Darktable", .tags = 1 << 6)
+	RULE(.class = "Vmplayer", .tags = 1 << 8)
+	RULE(.class = "St" TERMINAL)
+	RULE(.title = "Event Tester" NOSWALLOW)
+	/* scratchpads */
 	RULE(.instance = "spterm", .tags = SPTAG(0), .isfloating = 1)
+	RULE(.instance = "spmusic", .tags = SPTAG(1), .isfloating = 1)
+	RULE(.instance = "spsysmon", .tags = SPTAG(2), .isfloating = 1)
+	RULE(.instance = "spcalc", .tags = SPTAG(3), .isfloating = 1)
 };
 
-
-
 /* Bar rules allow you to configure what is shown where on the bar, as well as
  * introducing your own bar modules.
  *
@@ -193,55 +209,52 @@ static const Rule rules[] = {
 static const BarRule barrules[] = {
 	/* monitor   bar    alignment         widthfunc                 drawfunc                clickfunc                hoverfunc                name */
 	{ -1,        0,     BAR_ALIGN_LEFT,   width_tags,               draw_tags,              click_tags,              hover_tags,              "tags" },
-	{  0,        0,     BAR_ALIGN_RIGHT,  width_systray,            draw_systray,           click_systray,           NULL,                    "systray" },
 	{ -1,        0,     BAR_ALIGN_LEFT,   width_ltsymbol,           draw_ltsymbol,          click_ltsymbol,          NULL,                    "layout" },
 	{ statusmon, 0,     BAR_ALIGN_RIGHT,  width_status2d,           draw_status2d,          click_statuscmd,         NULL,                    "status2d" },
+	{ statusmon, 0,     BAR_ALIGN_RIGHT,  width_systray,            draw_systray,           click_systray,           NULL,                    "systray" },
+	{ -1,        0,     BAR_ALIGN_NONE,   width_wintitle,           draw_wintitle,          click_wintitle,          NULL,                    "wintitle" },
+	/* to use fancybar replace `draw_wintitle` with this, and include the fancybar patches
 	{ -1,        0,     BAR_ALIGN_NONE,   width_fancybar,           draw_fancybar,          click_fancybar,          NULL,                    "fancybar" },
+	*/
 };
 
 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
-static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
-static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */
-
-
+static const float mfact        = 0.5; /* factor of master area size [0.05..0.95] */
+static const int nmaster        = 1;   /* number of clients in master area */
+static const int resizehints    = 0;   /* 1 means respect size hints in tiled resizals */
+static const int lockfullscreen = 1;   /* 1 will force focus on the fullscreen window */
 
 static const Layout layouts[] = {
 	/* symbol     arrange function */
 	{ "[]=",      tile },    /* first entry is default */
-	{ "><>",      NULL },    /* no layout function means floating behavior */
 	{ "[M]",      monocle },
-	{ "TTT",      bstack },
-	{ "|M|",      centeredmaster },
 	{ "[D]",      deck },
 	{ "HHH",      grid },
+	{ "|M|",      centeredmaster },
+	{ "TTT",      bstack },
+	{ "><>",      NULL },    /* no layout function means floating behavior */
 };
 
-
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
 #define TAGKEYS(KEY,TAG) \
 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
 	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
 	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
-
-
-
 /* helper for spawning shell commands in the pre dwm-5.0 fashion */
 #define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
 static const char *dmenucmd[] = {
-	"dmenu_run",
-	"-m", dmenumon,
-	"-fn", dmenufont,
-	"-nb", normbgcolor,
-	"-nf", normfgcolor,
-	"-sb", selbgcolor,
-	"-sf", selfgcolor,
+	"dmrun",
+	/* "-m", dmenumon, */
+	/* "-fn", dmenufont, */
+	/* "-nb", normbgcolor, */
+	/* "-nf", normfgcolor, */
+	/* "-sb", selbgcolor, */
+	/* "-sf", selfgcolor, */
 	NULL
 };
 static const char *termcmd[]  = { "st", NULL };
@@ -249,65 +262,108 @@ static const char *termcmd[]  = { "st", NULL };
 /* This defines the name of the executable that handles the bar (used for signalling purposes) */
 #define STATUSBAR "dwmblocks"
 
-
 static const Key keys[] = {
 	/* modifier                     key            function                argument */
-	{ MODKEY,                       XK_p,          spawn,                  {.v = dmenucmd } },
-	{ MODKEY|ShiftMask,             XK_Return,     spawn,                  {.v = termcmd } },
-	{ MODKEY,                       XK_b,          togglebar,              {0} },
+	/* commands */
+	{ MODKEY,                       XK_space,     spawn,       {.v = (const char*[]){ "dmrun", "-p", "run:", NULL } } },
+	{ MODKEY,                       XK_Return,    spawn,       {.v = termcmd } },
+	/* { Mod1Mask,                     XK_Tab,       spawn,       {.v = (const char*[]){ "dmwin", NULL } } }, */
+	{ MODKEY,                       XK_grave,     spawn,       {.v = (const char*[]){ "dmunicode", NULL } } },
+	{ MODKEY,                       XK_BackSpace, spawn,       {.v = (const char*[]){ "dmsys", NULL } } },
+	{ MODKEY,                       XK_F2,        spawn,       {.v = (const char*[]){ "dmconf", NULL } } },
+	{ MODKEY,                       XK_F8,        spawn,       {.v = (const char*[]){ "dmmount", NULL } } },
+	{ MODKEY|ShiftMask,             XK_F8,        spawn,       {.v = (const char*[]){ "dmunmount", NULL } } },
+	{ Mod1Mask,                     XK_b,         spawn,       {.v = (const char*[]){ "bmks", NULL } } },
+	{ Mod1Mask|ShiftMask,           XK_b,         spawn,       {.v = (const char*[]){ "bmks", "add", NULL } } },
+	{ Mod1Mask,                     XK_n,         spawn,       {.v = (const char*[]){ "dmnotes", NULL } } },
+	{ Mod1Mask,                     XK_o,         spawn,       SHCMD("xdg-open \"$(dmfile)\"") },
+	{ MODKEY,                       XK_o,         spawn,       {.v = (const char*[]){ "linkhandler", NULL } } },
+	{ MODKEY,                       XK_F12,       spawn,       {.v = (const char*[]){ "dmrecord", NULL } } },
+	{ MODKEY|ShiftMask,             XK_F12,       spawn,       {.v = (const char*[]){ "dmrecord", "kill", NULL } } },
+	{ MODKEY|ControlMask,           XK_p,         spawn,       {.v = (const char*[]){ "dmdisplay", NULL } } },
+	{ MODKEY,                       XK_b,         spawn,       {.v = (const char*[]){ BROWSER, NULL } } },
+	{ MODKEY|ShiftMask,             XK_b,         spawn,       {.v = (const char*[]){ BROWSER, "--private-window", NULL } } },
+	{ MODKEY,                       XK_f,         spawn,       {.v = (const char*[]){ TERM, "-e", "lfpv", NULL } } },
+	{ MODKEY,                       XK_e,         spawn,       {.v = (const char*[]){ TERM, "-e", "vim", NULL } } },
+	{ MODKEY,                       XK_d,         spawn,       {.v = (const char*[]){ "discord", NULL } } },
+	{ MODKEY,                       XK_F4,        spawn,       {.v = (const char*[]){ "flameshot", "gui", NULL } } },
+	{ MODKEY|ShiftMask,             XK_F4,        spawn,       {.v = (const char*[]){ "flameshot", "launcher", NULL } } },
+	/* window management */
+	{ MODKEY|ControlMask,           XK_b,          togglebar,              {0} },
+	{ MODKEY,                       XK_q,          killclient,             {0} },
+	{ MODKEY|ShiftMask,             XK_q,          quit,                   {0} },
+	{ MODKEY|ControlMask|ShiftMask, XK_q,          quit,                   {1} },
+	/* tag switching */
+	{ MODKEY|ControlMask,           XK_Tab,        view,                   {0} },/*switch to last tag*/
+	{ MODKEY|ShiftMask,             XK_Tab,        shiftviewclients,       { .i = -1 } },/*shift to next tag with client*/
+	{ MODKEY,                       XK_Tab,        shiftviewclients,       { .i = +1 } },/*shift to prev tag with client*/
+	{ MODKEY,                       XK_0,          view,                   {.ui = ~SPTAGMASK } },/*view all tags*/
+	{ MODKEY|ShiftMask,             XK_0,          tag,                    {.ui = ~SPTAGMASK } },/*send to all tags?*/
+	/* window, layout and monitor */
 	{ MODKEY,                       XK_j,          focusstack,             {.i = +1 } },
 	{ MODKEY,                       XK_k,          focusstack,             {.i = -1 } },
-	{ MODKEY,                       XK_i,          incnmaster,             {.i = +1 } },
-	{ MODKEY,                       XK_d,          incnmaster,             {.i = -1 } },
-	{ MODKEY,                       XK_h,          setmfact,               {.f = -0.05} },
-	{ MODKEY,                       XK_l,          setmfact,               {.f = +0.05} },
 	{ MODKEY|ShiftMask,             XK_j,          movestack,              {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_k,          movestack,              {.i = -1 } },
-	{ MODKEY,                       XK_Return,     zoom,                   {0} },
-	{ MODKEY|Mod4Mask,              XK_u,          incrgaps,               {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_u,          incrgaps,               {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_i,          incrigaps,              {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_i,          incrigaps,              {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_o,          incrogaps,              {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_o,          incrogaps,              {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_6,          incrihgaps,             {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_6,          incrihgaps,             {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_7,          incrivgaps,             {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_7,          incrivgaps,             {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_8,          incrohgaps,             {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_8,          incrohgaps,             {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_9,          incrovgaps,             {.i = +1 } },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_9,          incrovgaps,             {.i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_0,          togglegaps,             {0} },
-	{ MODKEY|Mod4Mask|ShiftMask,    XK_0,          defaultgaps,            {0} },
-	{ MODKEY,                       XK_Tab,        view,                   {0} },
-	{ MODKEY|Mod4Mask,              XK_Tab,        shiftviewclients,       { .i = -1 } },
-	{ MODKEY|Mod4Mask,              XK_backslash,  shiftviewclients,       { .i = +1 } },
-	{ MODKEY|ShiftMask,             XK_c,          killclient,             {0} },
-	{ MODKEY|ShiftMask,             XK_q,          quit,                   {0} },
-	{ MODKEY|ControlMask|ShiftMask, XK_q,          quit,                   {1} },
-	{ MODKEY|ShiftMask,             XK_F5,         xrdb,                   {.v = NULL } },
-	{ MODKEY,                       XK_t,          setlayout,              {.v = &layouts[0]} },
-	{ MODKEY,                       XK_f,          setlayout,              {.v = &layouts[1]} },
-	{ MODKEY,                       XK_m,          setlayout,              {.v = &layouts[2]} },
-	{ MODKEY,                       XK_space,      setlayout,              {0} },
-	{ MODKEY|ShiftMask,             XK_space,      togglefloating,         {0} },
-	{ MODKEY,                       XK_grave,      togglescratch,          {.ui = 0 } },
-	{ MODKEY|ControlMask,           XK_grave,      setscratch,             {.ui = 0 } },
-	{ MODKEY|ShiftMask,             XK_grave,      removescratch,          {.ui = 0 } },
-	{ MODKEY|ShiftMask,             XK_s,          togglesticky,           {0} },
-	{ MODKEY,                       XK_0,          view,                   {.ui = ~SPTAGMASK } },
-	{ MODKEY|ShiftMask,             XK_0,          tag,                    {.ui = ~SPTAGMASK } },
-	{ MODKEY,                       XK_comma,      focusmon,               {.i = -1 } },
-	{ MODKEY,                       XK_period,     focusmon,               {.i = +1 } },
+	{ MODKEY,                       XK_h,          setmfact,               {.f = -0.05} },
+	{ MODKEY,                       XK_l,          setmfact,               {.f = +0.05} },
+	{ Mod1Mask|ShiftMask,           XK_Return,     zoom,                   {0} },
+	{ Mod1Mask|ShiftMask,           XK_s,          togglesticky,           {0} },
+	{ Mod1Mask|ShiftMask,           XK_f,          float_and_center,       {0} },
+	{ Mod1Mask,                     XK_i,          incnmaster,             {.i = +1 } },
+	{ Mod1Mask|ShiftMask,           XK_i,          incnmaster,             {.i = -1 } },
+	{ MODKEY,                       XK_comma,      cyclelayout,            {.i = -1 } },
+	{ MODKEY,                       XK_period,     cyclelayout,            {.i = +1 } },
 	{ MODKEY|ShiftMask,             XK_comma,      tagmon,                 {.i = -1 } },
 	{ MODKEY|ShiftMask,             XK_period,     tagmon,                 {.i = +1 } },
-	{ MODKEY|ControlMask,           XK_comma,      cyclelayout,            {.i = -1 } },
-	{ MODKEY|ControlMask,           XK_period,     cyclelayout,            {.i = +1 } },
-	TAGKEYS(                        XK_1,                                  0)
-	TAGKEYS(                        XK_2,                                  1)
-	TAGKEYS(                        XK_3,                                  2)
-	TAGKEYS(                        XK_4,                                  3)
+	{ MODKEY|ControlMask,           XK_comma,      focusmon,               {.i = -2 } },
+	{ MODKEY|ControlMask,           XK_period,     focusmon,               {.i = +1 } },
+	/* layouts */
+	{ Mod1Mask|ControlMask,         XK_t,          setlayout,              {.v = &layouts[0]} },
+	{ Mod1Mask|ControlMask,         XK_f,          setlayout,              {.v = &layouts[1]} },
+	/* gaps */
+	{ MODKEY|ControlMask,           XK_0,          togglegaps,             {0} },
+	{ MODKEY|ControlMask|ShiftMask, XK_0,          defaultgaps,            {0} },
+	{ MODKEY|ControlMask,           XK_g,          incrgaps,               {.i = +1 } },
+	{ MODKEY|ControlMask|ShiftMask, XK_g,          incrgaps,               {.i = -1 } },
+	/* scratchpads */
+	{ 0,                            XK_F12,       togglescratch,  {.ui = 0 } },
+	{ MODKEY,                       XK_m,         togglescratch,  {.ui = 1 } },
+	{ 0,                            XK_F10,       togglescratch,  {.ui = 2 } },
+	{ MODKEY,                       XK_c,         togglescratch,  {.ui = 3 } },
+	/* media keys */
+	{ 0, XF86XK_AudioPlay,          spawn, SHCMD("playerctl play-pause; pkill -RTMIN+13 dwmblocks") },
+	{ 0, XF86XK_AudioStop,          spawn, SHCMD("playerctl stop; pkill -RTMIN+13 dwmblocks") },
+	{ 0, XF86XK_AudioNext,          spawn, SHCMD("playerctl next; pkill -RTMIN+13 dwmblocks") },
+	{ 0, XF86XK_AudioPrev,          spawn, SHCMD("playerctl previous; pkill -RTMIN+13 dwmblocks") },
+	{ Mod1Mask, XK_F9,              spawn, {.v = (const char*[]){ "playerctl", "position", "10+", NULL } } },
+	{ Mod1Mask, XK_F7,              spawn, {.v = (const char*[]){ "playerctl", "position", "10-", NULL } } },
+	{ 0, XF86XK_AudioRaiseVolume,   spawn, SHCMD("volctl -i 2; pkill -RTMIN+10 dwmblocks") },
+	{ 0, XF86XK_AudioLowerVolume,   spawn, SHCMD("volctl -d 2; pkill -RTMIN+10 dwmblocks") },
+	{ 0, XF86XK_AudioMute,          spawn, SHCMD("volctl -t; pkill -RTMIN+10 dwmblocks") },
+	{ 0, XF86XK_MonBrightnessUp,    spawn, {.v = (const char*[]){ "backlightctl", "-inc", "5", NULL } } },
+	{ 0, XF86XK_MonBrightnessDown,  spawn, {.v = (const char*[]){ "backlightctl", "-dec", "5", NULL } } },
+	{ 0, XF86XK_KbdBrightnessUp,    spawn, {.v = (const char*[]){ "xbacklight", "-ctrl", "smc::kbd_backlight", "-inc", "10", NULL } } },
+	{ 0, XF86XK_KbdBrightnessDown, spawn, {.v = (const char*[]){ "xbacklight", "-ctrl", "smc::kbd_backlight", "-dec", "10", NULL } } },
+
+	/* { MODKEY|Mod1Mask,              XK_i,          incrigaps,              {.i = +1 } }, */
+	/* { MODKEY|Mod1Mask|ShiftMask,    XK_i,          incrigaps,              {.i = -1 } }, */
+	/* { MODKEY|Mod1Mask,              XK_o,          incrogaps,              {.i = +1 } }, */
+	/* { MODKEY|Mod1Mask|ShiftMask,    XK_o,          incrogaps,              {.i = -1 } }, */
+	/* { MODKEY|Mod1Mask,              XK_6,          incrihgaps,             {.i = +1 } }, */
+	/* { MODKEY|Mod1Mask|ShiftMask,    XK_6,          incrihgaps,             {.i = -1 } }, */
+	/* { MODKEY|Mod1Mask,              XK_7,          incrivgaps,             {.i = +1 } }, */
+	/* { MODKEY|Mod1Mask|ShiftMask,    XK_7,          incrivgaps,             {.i = -1 } }, */
+	/* { MODKEY|Mod1Mask,              XK_8,          incrohgaps,             {.i = +1 } }, */
+	/* { MODKEY|Mod1Mask|ShiftMask,    XK_8,          incrohgaps,             {.i = -1 } }, */
+	/* { MODKEY|Mod1Mask,              XK_9,          incrovgaps,             {.i = +1 } }, */
+	/* { MODKEY|Mod1Mask|ShiftMask,    XK_9,          incrovgaps,             {.i = -1 } }, */
+	/* { MODKEY|ShiftMask,             XK_F5,         xrdb,                   {.v = NULL } },*reload xresources*/
+	/* { MODKEY,                       XK_m,          setlayout,              {.v = &layouts[2]} }, */
+	/* { MODKEY,                       XK_space,      setlayout,              {0} }, */
+	TAGKEYS(                        XK_1,                                  0)/* mod > switch view*/
+	TAGKEYS(                        XK_2,                                  1)/* mod ctrl > make visible*/
+	TAGKEYS(                        XK_3,                                  2)/* mod shift > send active to tag*/
+	TAGKEYS(                        XK_4,                                  3)/* mod ctrl shift > tag active with*/
 	TAGKEYS(                        XK_5,                                  4)
 	TAGKEYS(                        XK_6,                                  5)
 	TAGKEYS(                        XK_7,                                  6)
@@ -315,7 +371,6 @@ static const Key keys[] = {
 	TAGKEYS(                        XK_9,                                  8)
 };
 
-
 /* button definitions */
 /* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
 static const Button buttons[] = {
@@ -326,6 +381,8 @@ static const Button buttons[] = {
 	{ ClkStatusText,        0,                   Button1,        sigstatusbar,   {.i = 1 } },
 	{ ClkStatusText,        0,                   Button2,        sigstatusbar,   {.i = 2 } },
 	{ ClkStatusText,        0,                   Button3,        sigstatusbar,   {.i = 3 } },
+	{ ClkStatusText,        0,                   Button4,        sigstatusbar,   {.i = 4 } },
+	{ ClkStatusText,        0,                   Button5,        sigstatusbar,   {.i = 5 } },
 	{ ClkClientWin,         MODKEY,              Button1,        movemouse,      {0} },
 	{ ClkClientWin,         MODKEY,              Button2,        togglefloating, {0} },
 	{ ClkClientWin,         MODKEY,              Button3,        resizemouse,    {0} },
@@ -334,5 +391,3 @@ static const Button buttons[] = {
 	{ ClkTagBar,            MODKEY,              Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,              Button3,        toggletag,      {0} },
 };
-
-
-- 
2.39.2

